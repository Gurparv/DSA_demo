import java.util.ArrayDeque;
import java.util.Deque;

public class MyStack {
    private Deque<Integer> stack;

    public MyStack(int len) {
        this.stack = new ArrayDeque<>(len);
    }

    public void push(int x) {
        if (stack.isEmpty()) {
            System.out.print("-1 ");
        } else {
            int lastItem = stack.peek();
            if (lastItem > x)
                System.out.print(lastItem + " ");
            else {
                findLargest(x);

            }
        }
        stack.push(x);
    }

    public void findLargest(int x) {
        while (!stack.isEmpty() && stack.peek() < x)
            stack.pop();
        if (stack.isEmpty())
            System.out.print("-1" + " ");
        else
            System.out.print(stack.peek() + " ");
    }

}
////////////////////////////////////////////////////////////////////////////////
public class Main {
    public static void main(String[] args) {

        int[] inputArr1 = {15, 10, 18, 12, 4, 6, 2, 8};
        int[] inputArr2 = {8, 10, 12};
        int[] inputArr3 = {12, 10, 8};

        MyStack myStack = new MyStack(inputArr1.length);
        MyStack myStack2 = new MyStack(inputArr2.length);
        MyStack myStack3 = new MyStack(inputArr3.length);

        for (int i = 0; i < inputArr1.length; i++) {
            myStack.push(inputArr1[i]);
        }

        System.out.println();

        for (int i = 0; i < inputArr2.length; i++) {
            myStack2.push(inputArr2[i]);
        }

        System.out.println();
       
        for (int i = 0; i < inputArr3.length; i++) {
            myStack3.push(inputArr3[i]);
        }

    }

}

